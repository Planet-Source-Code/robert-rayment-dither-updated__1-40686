     1                                  ;Dither.asm  by Robert Rayment  Nov 2002
     2                                  
     3                                  ; ASM layout done to roughly match VB layout
     4                                  
     5                                  ; VB
     6                                  ; Public ptrMC, ptrStruc    ' Ptrs to Machine Code & Structure
     7                                  ; 'MCode Structure
     8                                  ; Public Type PStruc
     9                                  ;   picWd As Long
    10                                  ;   picHt As Long
    11                                  ;   Ptrpic1mem As Long      ' pic1mem(1-4,1-picWd,1-picHt) bytes
    12                                  ;   Ptrpic2mem As Long      ' pic2mem(1-4,1-picWd,1-picHt) bytes
    13                                  ;   PtrIArr As Long         ' IArr(1-picWd,1-picHt)
    14                                  ;   BlackThreshHold As Long ' 0-255
    15                                  ;   DithDIV As Long         ' FSADIV, FSBDIV,StuckDiv etc
    16                                  ;   greysum As Long
    17                                  ; '---------------------------------
    18                                  ;   NX As Long
    19                                  ;   NY As Long
    20                                  ;   NT As Long
    21                                  ;   PtrLimits As Long       ' Limits(1-NT)
    22                                  ;   PtrTM As Long           ' TM(1-NX, 1-NY, 1-NT) bytes
    23                                  ;   RandSeed As Long        ' (0-.99999) * 255
    24                                  ;   OpCode As Long
    25                                  ; End Type
    26                                  ; Public DStruc As PStruc
    27                                  ; EG
    28                                  ; Public DitherMC() As Byte
    29                                  ; Public Sub ASM_BlackWhite()
    30                                  ; DStruc.OpCode = 0
    31                                  ; res = CallWindowProc(ptrMC, ptrStruc, 2&, 3&, 4&)
    32                                  ;                             8         12  16  20
    33                                  ; End Sub
    34                                  
    35                                  %macro movab 2      ;name & num of parameters
    36                                    push dword %2     ;2nd param
    37                                    pop dword %1      ;1st param
    38                                  %endmacro           ;use  movab %1,%2
    39                                  ;Allows eg  movab bmW,[ebx+4]
    40                                  
    41                                  ;Define names to match VB code
    42                                  %define picWd          [ebp-4]
    43                                  %define picHt          [ebp-8]
    44                                  %define Ptrpic1mem     [ebp-12]
    45                                  %define Ptrpic2mem     [ebp-16]
    46                                  %define PtrIArr        [ebp-20]
    47                                  %define BlackThreshHold [ebp-24]
    48                                  %define DithDIV        [ebp-28]
    49                                  %define greysum        [ebp-32] ; Also AvGrey
    50                                  %define NX             [ebp-36]
    51                                  %define NY             [ebp-40]
    52                                  %define NT             [ebp-44]
    53                                  %define PtrLimits      [ebp-48]
    54                                  %define PtrTM          [ebp-52]
    55                                  %define RandSeed       [ebp-56]
    56                                  %define OpCode         [ebp-60]
    57                                  ; Some variables
    58                                  %define j       [ebp-64]
    59                                  %define i       [ebp-68]
    60                                  
    61                                  %define zMul    [ebp-72]    
    62                                  %define cul     [ebp-76]
    63                                  %define zErr    [ebp-80]
    64                                  %define Temp    [ebp-84]
    65                                  %define N       [ebp-88]
    66                                  %define jj      [ebp-92]
    67                                  %define ii      [ebp-96]
    68                                  %define jjup    [ebp-100]
    69                                  %define iiup    [ebp-104]
    70                                  %define cul0    [ebp-108]
    71                                  %define culr    [ebp-112]
    72                                  %define Seed    [ebp-116] ; from RandSeed
    73                                  %define Rand    [ebp-120]
    74                                  %define T255    [ebp-124]
    75                                  
    76                                  %define ptmc    [ebp-128]   ; ptr mcode buffer
    77                                  
    78                                  
    79                                  
    80                                  [bits 32]
    81                                  
    82 00000000 55                          push ebp
    83 00000001 89E5                        mov ebp,esp
    84 00000003 81EC80000000                sub esp,128
    85 00000009 57                          push edi
    86 0000000A 56                          push esi
    87 0000000B 53                          push ebx
    88                                  
    89 0000000C E88B000000                  Call BufferADDR
    90 00000011 2D11000000                  sub eax,17          ; 17B from push ebp to CallBufferADDR incl
    91 00000016 894580                      mov ptmc,eax
    92                                  
    93                                  
    94                                      ;Fill structure
    95 00000019 8B5D08                      mov ebx,            [ebp+8]
    96                                      movab picWd,        [ebx]
    97 0000001C FF33                <1>   push dword %2
    98 0000001E 8F45FC              <1>   pop dword %1
    99                                      movab picHt,        [ebx+4]
   100 00000021 FF7304              <1>   push dword %2
   101 00000024 8F45F8              <1>   pop dword %1
   102                                      movab Ptrpic1mem,   [ebx+8]
   103 00000027 FF7308              <1>   push dword %2
   104 0000002A 8F45F4              <1>   pop dword %1
   105                                      movab Ptrpic2mem,   [ebx+12]
   106 0000002D FF730C              <1>   push dword %2
   107 00000030 8F45F0              <1>   pop dword %1
   108                                      movab PtrIArr,      [ebx+16]
   109 00000033 FF7310              <1>   push dword %2
   110 00000036 8F45EC              <1>   pop dword %1
   111                                      movab BlackThreshHold,[ebx+20]
   112 00000039 FF7314              <1>   push dword %2
   113 0000003C 8F45E8              <1>   pop dword %1
   114                                      movab DithDIV,      [ebx+24]
   115 0000003F FF7318              <1>   push dword %2
   116 00000042 8F45E4              <1>   pop dword %1
   117                                      movab greysum,      [ebx+28]
   118 00000045 FF731C              <1>   push dword %2
   119 00000048 8F45E0              <1>   pop dword %1
   120                                      movab NX,           [ebx+32]
   121 0000004B FF7320              <1>   push dword %2
   122 0000004E 8F45DC              <1>   pop dword %1
   123                                      movab NY,           [ebx+36]
   124 00000051 FF7324              <1>   push dword %2
   125 00000054 8F45D8              <1>   pop dword %1
   126                                      movab NT,           [ebx+40]
   127 00000057 FF7328              <1>   push dword %2
   128 0000005A 8F45D4              <1>   pop dword %1
   129                                      movab PtrLimits,    [ebx+44]
   130 0000005D FF732C              <1>   push dword %2
   131 00000060 8F45D0              <1>   pop dword %1
   132                                      movab PtrTM,        [ebx+48]
   133 00000063 FF7330              <1>   push dword %2
   134 00000066 8F45CC              <1>   pop dword %1
   135                                      movab RandSeed,     [ebx+52]
   136 00000069 FF7334              <1>   push dword %2
   137 0000006C 8F45C8              <1>   pop dword %1
   138                                      movab OpCode,       [ebx+56]
   139 0000006F FF7338              <1>   push dword %2
   140 00000072 8F45C4              <1>   pop dword %1
   141                                  ;----------------------------
   142                                  
   143                                  	; Using jump table
   144 00000075 BB[00000000]                mov ebx,Sub0
   145 0000007A 8B45C4                      mov eax,OpCode
   146 0000007D 3D08000000              	cmp eax,8
   147 00000082 7F0F                    	jg GETOUT			; Error
   148 00000084 C1E002                      shl eax,2           ; x4
   149 00000087 01C3                        add ebx,eax
   150 00000089 035D80                      add ebx,ptmc
   151 0000008C 8B03                        mov eax,[ebx]
   152 0000008E 034580                      add eax,ptmc
   153 00000091 FFD0                        Call eax
   154                                  
   155                                  ;    jmp GETOUT
   156                                  ;    
   157                                  ;
   158                                  ;    mov eax,OpCode
   159                                  ;    cmp eax,0
   160                                  ;    jne T1
   161                                  ;    Call BLACKWHITE
   162                                  ;    jmp GETOUT
   163                                  ;T1:
   164                                  ;    cmp eax,1
   165                                  ;    jne T2
   166                                  ;    Call FloydSteinbergA
   167                                  ;    jmp GETOUT
   168                                  ;
   169                                  ;T2: 
   170                                  ;    cmp eax,2
   171                                  ;    jne T3
   172                                  ;    Call FloydSteinbergB
   173                                  ;    jmp GETOUT
   174                                  ;T3: 
   175                                  ;    cmp eax,3
   176                                  ;    jne T4
   177                                  ;    Call Stucki
   178                                  ;    jmp GETOUT
   179                                  ;T4:
   180                                  ;    cmp eax,4
   181                                  ;    jne T5
   182                                  ;    Call Burkes
   183                                  ;    jmp GETOUT
   184                                  ;T5:
   185                                  ;    cmp eax,5
   186                                  ;    jne T6
   187                                  ;    Call Sierra
   188                                  ;    jmp GETOUT
   189                                  ;T6:
   190                                  ;    cmp eax,6
   191                                  ;    jne T7
   192                                  ;    Call Jarvis
   193                                  ;    jmp GETOUT
   194                                  ;T7:
   195                                  ;    cmp eax,7
   196                                  ;    jne T8
   197                                  ;    Call DOPATTERN
   198                                  ;    jmp GETOUT
   199                                  ;T8:
   200                                  ;    cmp eax,8
   201                                  ;    jne GETOUT
   202                                  ;    Call RANDOM
   203                                  ;
   204                                  ;    jmp GETOUT
   205                                  
   206                                  
   207                                  GETOUT:
   208 00000093 5B                          pop ebx
   209 00000094 5E                          pop esi
   210 00000095 5F                          pop edi
   211 00000096 89EC                        mov esp,ebp
   212 00000098 5D                          pop ebp
   213 00000099 C21000                      ret 16
   214                                  
   215                                  ;=====================================================================
   216                                  ; Get mcode buffer absolute start addres
   217                                  BufferADDR:
   218 0000009C 58                          pop eax
   219 0000009D 50                          push eax
   220 0000009E C3                      RET
   221                                  ;=====================================================
   222                                  
   223                                  BLACKWHITE:
   224                                      ; Zero pic2mem
   225 0000009F 8B45F8                      mov eax,picHt
   226 000000A2 8B5DFC                      mov ebx,picWd
   227 000000A5 F7E3                        mul ebx
   228 000000A7 89C1                        mov ecx,eax         ; picHt*picWd no. of 4-bytes chunks in pic2mem
   229 000000A9 31C0                        xor eax,eax         ; eax=0
   230 000000AB 8B7DF0                      mov edi,Ptrpic2mem
   231 000000AE F3AB                        rep stosd
   232                                   
   233 000000B0 8B4DF8                      mov ecx,picHt
   234                                  ForjBW:
   235 000000B3 894DC0                      mov j,ecx
   236 000000B6 51                          push ecx
   237 000000B7 8B4DFC                      mov ecx,picWd
   238                                  ForiBW:
   239 000000BA 894DBC                      mov i,ecx
   240 000000BD 8B7DF4                      mov edi,Ptrpic1mem
   241 000000C0 E8B4070000                  Call GetAddrpicji       ; edi-> pic1mem(1,i,j)
   242 000000C5 31C0                        xor eax,eax
   243 000000C7 31DB                        xor ebx,ebx
   244 000000C9 8A07                        mov AL,Byte[edi]    ; B
   245 000000CB 8A5F01                      mov BL,Byte[edi+1]  ; G
   246 000000CE 01D8                        add eax,ebx
   247 000000D0 8A5F02                      mov BL,Byte[edi+2]  ; R
   248 000000D3 01D8                        add eax,ebx
   249 000000D5 BB03000000                  mov ebx,3
   250 000000DA F7F3                        div ebx             ; eax = (B+G+R)\3
   251 000000DC 3B45E8                      cmp eax,BlackThreshHold
   252 000000DF 7E0E                        jle NextiBW         ; AL<=BlackThreshHold 
   253                                  
   254 000000E1 8B7DF0                      mov edi,Ptrpic2mem
   255 000000E4 E890070000                  Call GetAddrpicji       ; edi-> pic2mem(1,i,j)
   256 000000E9 C707FFFFFF00                mov [edi],DWord 0FFFFFFh    ; White
   257                                  NextiBW:
   258 000000EF 49                          dec ecx
   259 000000F0 75C8                        jnz ForiBW
   260                                  
   261 000000F2 59                          pop ecx
   262 000000F3 49                          dec ecx
   263 000000F4 75BD                        jnz ForjBW
   264 000000F6 C3                      RET
   265                                  
   266                                  ;=====================================================
   267                                  %define zMul    [ebp-72]    
   268                                  %define cul     [ebp-76]
   269                                  %define zErr    [ebp-80]
   270                                  %define Temp    [ebp-84]
   271                                  
   272                                  FloydSteinbergA:
   273                                  
   274 000000F7 E8BF060000                  Call FillIntensityArray
   275                                  
   276 000000FC D9E8                        fld1
   277 000000FE DB45E4                      fild DWord DithDIV  ; FSADIV,1
   278 00000101 DEF9                        fdivp st1           ; st1/sto = 1/FSADIV
   279 00000103 D95DB8                      fstp DWord zMul
   280                                  
   281 00000106 B901000000                  mov ecx,1           ; Need to start at 1
   282                                  FSAj:
   283 0000010B 894DC0                      mov j,ecx
   284 0000010E 51                          push ecx
   285 0000010F B901000000                  mov ecx,1
   286                                  FSAi:
   287 00000114 894DBC                      mov i,ecx
   288                                      
   289 00000117 E80A070000                  Call Fillpic2memGetzErr
   290                                      
   291                                      ; Spread error j=j+1
   292 0000011C FF45C0                      inc DWord j         ; j=j+1
   293                                  
   294 0000011F B803000000                  mov eax,3
   295 00000124 E818040000                  Call Diffuse        ; IArr(i,j+1)=IArr(i,j+1)+3*zErr
   296                                  
   297 00000129 FF45BC                      inc DWord i         ; i=i+1
   298 0000012C B802000000                  mov eax,2
   299 00000131 E80B040000                  Call Diffuse        ; IArr(i+1,j+1)=IArr(i+1,j+1)+2*zErr
   300 00000136 FF4DBC                      dec DWord i         ; i=i
   301                                  
   302 00000139 FF4DC0                      dec DWord j         ; j=j
   303                                  
   304                                      ; Spread error i=i+1
   305 0000013C FF45BC                      inc DWord i         ; i=i+1
   306                                  
   307 0000013F B803000000                  mov eax,3
   308 00000144 E8F8030000                  Call Diffuse        ; IArr(i+1,j)=IArr(i+1,j)+3*zErr
   309                                  
   310 00000149 FF4DBC                      dec DWord i         ; i=i  ; Some of these could be omitted
   311                                  
   312                                  NextFSAi:
   313 0000014C 41                          inc ecx             ; i+1
   314 0000014D 3B4DFC                      cmp ecx,picWd
   315 00000150 0F8EBEFFFFFF                jle Near FSAi
   316                                  
   317 00000156 59                          pop ecx
   318 00000157 41                          inc ecx             ; j+1
   319 00000158 3B4DF8                      cmp ecx,picHt
   320 0000015B 0F8EAAFFFFFF                jle Near FSAj
   321 00000161 C3                      RET
   322                                  
   323                                  ;=====================================================
   324                                  %define zMul    [ebp-72]    
   325                                  %define cul     [ebp-76]
   326                                  %define zErr    [ebp-80]
   327                                  %define Temp    [ebp-84]
   328                                  
   329                                  FloydSteinbergB:
   330                                  
   331 00000162 E854060000                  Call FillIntensityArray
   332                                  
   333 00000167 D9E8                        fld1
   334 00000169 DB45E4                      fild DWord DithDIV  ; FSBDIV,1
   335 0000016C DEF9                        fdivp st1           ; st1/sto = 1/FSBDIV
   336 0000016E D95DB8                      fstp DWord zMul
   337                                  
   338 00000171 B901000000                  mov ecx,1           ; Need to start at 1
   339                                  FSBj:
   340 00000176 894DC0                      mov j,ecx
   341 00000179 51                          push ecx
   342 0000017A B901000000                  mov ecx,1
   343                                  FSBi:
   344 0000017F 894DBC                      mov i,ecx
   345                                  
   346 00000182 E89F060000                  Call Fillpic2memGetzErr
   347                                  
   348                                      ; Spread error j=j+1
   349 00000187 FF45C0                      inc DWord j         ; j=j+1 ===
   350                                  
   351 0000018A FF4DBC                      dec DWord i         ; i=i-1
   352 0000018D B803000000                  mov eax,3
   353 00000192 E8AA030000                  Call Diffuse        ; IArr(i-1,j+1)=IArr(i-1,j+1)+3*zErr
   354                                      
   355 00000197 FF45BC                      inc DWord i         ; i=i
   356 0000019A B805000000                  mov eax,5
   357 0000019F E89D030000                  Call Diffuse        ; IArr(i,j+1)=IArr(i,j+1)+5*zErr
   358                                      
   359 000001A4 FF45BC                      inc DWord i         ; i=i+1
   360 000001A7 B801000000                  mov eax,1
   361 000001AC E890030000                  Call Diffuse        ; IArr(i+1,j+1)=IArr(i+1,j+1)+1*zErr
   362 000001B1 FF4DBC                      dec DWord i         ; i=i-1
   363                                  
   364 000001B4 FF4DC0                      dec DWord j         ; j=j ===
   365                                  
   366                                      ; Spread error j=j
   367 000001B7 FF45BC                      inc DWord i         ; i=i+1
   368 000001BA B807000000                  mov eax,7
   369 000001BF E87D030000                  Call Diffuse        ; IArr(i+1,j)=IArr(i+1,j)+7*zErr
   370 000001C4 FF4DBC                      dec DWord i         ; i=i
   371                                  
   372                                  NextFSBi:
   373 000001C7 41                          inc ecx             ; i+1
   374 000001C8 3B4DFC                      cmp ecx,picWd
   375 000001CB 0F8EAEFFFFFF                jle Near FSBi
   376                                  
   377 000001D1 59                          pop ecx
   378 000001D2 41                          inc ecx             ; j+1
   379 000001D3 3B4DF8                      cmp ecx,picHt
   380 000001D6 0F8E9AFFFFFF                jle Near FSBj
   381 000001DC C3                      RET
   382                                  
   383                                  ;=====================================================
   384                                  Stucki:
   385                                  %define zMul    [ebp-72]    
   386                                  %define cul     [ebp-76]
   387                                  %define zErr    [ebp-80]
   388                                  %define Temp    [ebp-84]
   389                                  
   390 000001DD E8D9050000                  Call FillIntensityArray
   391                                  
   392 000001E2 D9E8                        fld1
   393 000001E4 DB45E4                      fild DWord DithDIV  ; Stucki,1
   394 000001E7 DEF9                        fdivp st1           ; st1/sto = 1/Stucki
   395 000001E9 D95DB8                      fstp DWord zMul
   396                                  
   397 000001EC B901000000                  mov ecx,1           ; Need to start at 1
   398                                  Stuckij:
   399 000001F1 894DC0                      mov j,ecx
   400 000001F4 51                          push ecx
   401 000001F5 B901000000                  mov ecx,1
   402                                  
   403                                  Stuckii:
   404 000001FA 894DBC                      mov i,ecx
   405                                  
   406 000001FD E824060000                  Call Fillpic2memGetzErr
   407                                  
   408                                      ; Spread error j+2
   409 00000202 FF45C0                      inc DWord j
   410 00000205 FF45C0                      inc DWord j         ; j=j+2 ===
   411                                      
   412 00000208 FF4DBC                      dec DWord i
   413 0000020B FF4DBC                      dec DWord i         ; i=i-2
   414 0000020E B801000000                  mov eax,1
   415 00000213 E829030000                  Call Diffuse        ; IArr(i-2,j+2)=IArr(i-2,j+1)+1*zErr
   416 00000218 FF45BC                      inc DWord i         ; i=i-1
   417 0000021B B802000000                  mov eax,2
   418 00000220 E81C030000                  Call Diffuse        ; IArr(i-1,j+2)=IArr(i-1,j+1)+2*zErr
   419 00000225 FF45BC                      inc DWord i         ; i=i
   420 00000228 B804000000                  mov eax,4
   421 0000022D E80F030000                  Call Diffuse        ; IArr(i,j+2)=IArr(i,j+1)+4*zErr
   422 00000232 FF45BC                      inc DWord i         ; i=i+1
   423 00000235 B802000000                  mov eax,2
   424 0000023A E802030000                  Call Diffuse        ; IArr(i+1,j+2)=IArr(i+1,j+1)+2*zErr
   425 0000023F FF45BC                      inc DWord i         ; i=i+2
   426 00000242 B801000000                  mov eax,1
   427 00000247 E8F5020000                  Call Diffuse        ; IArr(i+2,j+2)=IArr(i+2,j+1)+2*zErr
   428 0000024C FF4DBC                      dec DWord i
   429 0000024F FF4DBC                      dec DWord i         ; i=i
   430                                  
   431                                      ; Spread error j+1
   432 00000252 FF4DC0                      dec DWord j         ; j=j+1
   433 00000255 FF4DBC                      dec DWord i
   434 00000258 FF4DBC                      dec DWord i         ; i=i-2
   435 0000025B B802000000                  mov eax,2
   436 00000260 E8DC020000                  Call Diffuse        ; IArr(i-2,j+1)=IArr(i-2,j+1)+2*zErr
   437 00000265 FF45BC                      inc DWord i         ; i=i-1
   438 00000268 B804000000                  mov eax,4
   439 0000026D E8CF020000                  Call Diffuse        ; IArr(i-1,j+1)=IArr(i-1,j+1)+4*zErr
   440 00000272 FF45BC                      inc DWord i         ; i=i
   441 00000275 B808000000                  mov eax,8
   442 0000027A E8C2020000                  Call Diffuse        ; IArr(i,j+1)=IArr(i,j+1)+8*zErr
   443 0000027F FF45BC                      inc DWord i         ; i=i+1
   444 00000282 B804000000                  mov eax,4
   445 00000287 E8B5020000                  Call Diffuse        ; IArr(i+1,j+1)=IArr(i+1,j+1)+4*zErr
   446 0000028C FF45BC                      inc DWord i         ; i=i+2
   447 0000028F B802000000                  mov eax,2
   448 00000294 E8A8020000                  Call Diffuse        ; IArr(i+2,j+1)=IArr(i+2,j+1)+2*zErr
   449 00000299 FF4DBC                      dec DWord i         ; i=i+1
   450                                  
   451                                      ; Spread error j
   452 0000029C FF4DC0                      dec DWord j         ; j=j
   453 0000029F B808000000                  mov eax,8
   454 000002A4 E898020000                  Call Diffuse        ; IArr(i+1,j)=IArr(i+1,j)+8*zErr
   455 000002A9 FF45BC                      inc DWord i         ; i=i+2
   456 000002AC B804000000                  mov eax,4
   457 000002B1 E88B020000                  Call Diffuse        ; IArr(i+2,j)=IArr(i+2,j)+4*zErr
   458 000002B6 FF4DBC                      dec DWord i
   459 000002B9 FF4DBC                      dec DWord i         ; i=i
   460                                  
   461                                  NextStuckii:
   462 000002BC 41                          inc ecx             ; i+1
   463 000002BD 3B4DFC                      cmp ecx,picWd
   464 000002C0 0F8E34FFFFFF                jle Near Stuckii
   465                                  
   466 000002C6 59                          pop ecx
   467 000002C7 41                          inc ecx             ; j+1
   468 000002C8 3B4DF8                      cmp ecx,picHt
   469 000002CB 0F8E20FFFFFF                jle Near Stuckij
   470 000002D1 C3                      RET
   471                                  
   472                                  ;=====================================================
   473                                  Burkes:
   474                                  %define zMul    [ebp-72]    
   475                                  %define cul     [ebp-76]
   476                                  %define zErr    [ebp-80]
   477                                  %define Temp    [ebp-84]
   478                                  
   479 000002D2 E8E4040000                  Call FillIntensityArray
   480                                  
   481 000002D7 D9E8                        fld1
   482 000002D9 DB45E4                      fild DWord DithDIV  ; Burkes,1
   483 000002DC DEF9                        fdivp st1           ; st1/sto = 1/Burkes
   484 000002DE D95DB8                      fstp DWord zMul
   485                                  
   486 000002E1 B901000000                  mov ecx,1           ; Need to start at 1
   487                                  Burkesj:
   488 000002E6 894DC0                      mov j,ecx
   489 000002E9 51                          push ecx
   490 000002EA B901000000                  mov ecx,1
   491                                  
   492                                  Burkesi:
   493 000002EF 894DBC                      mov i,ecx
   494                                  
   495 000002F2 E82F050000                  Call Fillpic2memGetzErr
   496                                  
   497                                      ; Spread error j+1
   498 000002F7 FF45C0                      inc DWord j         ; j=j+1
   499 000002FA FF4DBC                      dec DWord i
   500 000002FD FF4DBC                      dec DWord i         ; i=i-2
   501 00000300 B802000000                  mov eax,2
   502 00000305 E837020000                  Call Diffuse        ; IArr(i-2,j+1)=IArr(i-2,j+1)+2*zErr
   503 0000030A FF45BC                      inc DWord i         ; i=i-1
   504 0000030D B804000000                  mov eax,4
   505 00000312 E82A020000                  Call Diffuse        ; IArr(i-1,j+1)=IArr(i-1,j+1)+4*zErr
   506 00000317 FF45BC                      inc DWord i         ; i=i
   507 0000031A B808000000                  mov eax,8
   508 0000031F E81D020000                  Call Diffuse        ; IArr(i,j+1)=IArr(i,j+1)+8*zErr
   509 00000324 FF45BC                      inc DWord i         ; i=i+1
   510 00000327 B804000000                  mov eax,4
   511 0000032C E810020000                  Call Diffuse        ; IArr(i+1,j+1)=IArr(i+1,j+1)+4*zErr
   512 00000331 FF45BC                      inc DWord i         ; i=i+2
   513 00000334 B802000000                  mov eax,2
   514 00000339 E803020000                  Call Diffuse        ; IArr(i+2,j+1)=IArr(i+2,j+1)+2*zErr
   515 0000033E FF4DBC                      dec DWord i         ; i=i+1
   516                                  
   517                                      ; Spread error j
   518 00000341 FF4DC0                      dec DWord j         ; j=j
   519 00000344 B808000000                  mov eax,8
   520 00000349 E8F3010000                  Call Diffuse        ; IArr(i+1,j)=IArr(i+1,j)+8*zErr
   521 0000034E FF45BC                      inc DWord i         ; i=i+2
   522 00000351 B804000000                  mov eax,4
   523 00000356 E8E6010000                  Call Diffuse        ; IArr(i+2,j)=IArr(i+2,j)+4*zErr
   524 0000035B FF4DBC                      dec DWord i
   525 0000035E FF4DBC                      dec DWord i         ; i=i
   526                                  
   527                                  NextBurkesi:
   528 00000361 41                          inc ecx             ; i+1
   529 00000362 3B4DFC                      cmp ecx,picWd
   530 00000365 0F8E84FFFFFF                jle Near Burkesi
   531                                  
   532 0000036B 59                          pop ecx
   533 0000036C 41                          inc ecx             ; j+1
   534 0000036D 3B4DF8                      cmp ecx,picHt
   535 00000370 0F8E70FFFFFF                jle Near Burkesj
   536 00000376 C3                      RET
   537                                  
   538                                  ;=====================================================
   539                                  Sierra:
   540                                  %define zMul    [ebp-72]    
   541                                  %define cul     [ebp-76]
   542                                  %define zErr    [ebp-80]
   543                                  %define Temp    [ebp-84]
   544                                  
   545 00000377 E83F040000                  Call FillIntensityArray
   546                                  
   547 0000037C D9E8                        fld1
   548 0000037E DB45E4                      fild DWord DithDIV  ; Sierra,1
   549 00000381 DEF9                        fdivp st1           ; st1/sto = 1/Sierra
   550 00000383 D95DB8                      fstp DWord zMul
   551                                  
   552 00000386 B901000000                  mov ecx,1           ; Need to start at 1
   553                                  Sierraj:
   554 0000038B 894DC0                      mov j,ecx
   555 0000038E 51                          push ecx
   556 0000038F B901000000                  mov ecx,1
   557                                  
   558                                  Sierrai:
   559 00000394 894DBC                      mov i,ecx
   560                                  
   561 00000397 E88A040000                  Call Fillpic2memGetzErr
   562                                  
   563                                      ; Spread error j+2
   564 0000039C FF45C0                      inc DWord j
   565 0000039F FF45C0                      inc DWord j         ; j=j+2 ===
   566                                      
   567 000003A2 FF4DBC                      dec DWord i         ; i=i-1
   568 000003A5 B802000000                  mov eax,2
   569 000003AA E892010000                  Call Diffuse        ; IArr(i-1,j+2)=IArr(i-1,j+1)+2*zErr
   570 000003AF FF45BC                      inc DWord i         ; i=i
   571 000003B2 B803000000                  mov eax,3
   572 000003B7 E885010000                  Call Diffuse        ; IArr(i,j+2)=IArr(i,j+1)+3*zErr
   573 000003BC FF45BC                      inc DWord i         ; i=i+1
   574 000003BF B802000000                  mov eax,2
   575 000003C4 E878010000                  Call Diffuse        ; IArr(i+1,j+2)=IArr(i+1,j+1)+2*zErr
   576 000003C9 FF4DBC                      dec DWord i         ; i=i
   577                                  
   578                                      ; Spread error j+1
   579 000003CC FF4DC0                      dec DWord j         ; j=j+1
   580 000003CF FF4DBC                      dec DWord i
   581 000003D2 FF4DBC                      dec DWord i         ; i=i-2
   582 000003D5 B802000000                  mov eax,2
   583 000003DA E862010000                  Call Diffuse        ; IArr(i-2,j+1)=IArr(i-2,j+1)+2*zErr
   584 000003DF FF45BC                      inc DWord i         ; i=i-1
   585 000003E2 B804000000                  mov eax,4
   586 000003E7 E855010000                  Call Diffuse        ; IArr(i-1,j+1)=IArr(i-1,j+1)+4*zErr
   587 000003EC FF45BC                      inc DWord i         ; i=i
   588 000003EF B805000000                  mov eax,5
   589 000003F4 E848010000                  Call Diffuse        ; IArr(i,j+1)=IArr(i,j+1)+5*zErr
   590 000003F9 FF45BC                      inc DWord i         ; i=i+1
   591 000003FC B804000000                  mov eax,4
   592 00000401 E83B010000                  Call Diffuse        ; IArr(i+1,j+1)=IArr(i+1,j+1)+4*zErr
   593 00000406 FF45BC                      inc DWord i         ; i=i+2
   594 00000409 B802000000                  mov eax,2
   595 0000040E E82E010000                  Call Diffuse        ; IArr(i+2,j+1)=IArr(i+2,j+1)+2*zErr
   596 00000413 FF4DBC                      dec DWord i         ; i=i+1
   597                                  
   598                                      ; Spread error j
   599 00000416 FF4DC0                      dec DWord j         ; j=j
   600 00000419 B805000000                  mov eax,5
   601 0000041E E81E010000                  Call Diffuse        ; IArr(i+1,j)=IArr(i+1,j)+5*zErr
   602 00000423 FF45BC                      inc DWord i         ; i=i+2
   603 00000426 B803000000                  mov eax,3
   604 0000042B E811010000                  Call Diffuse        ; IArr(i+2,j)=IArr(i+2,j)+3*zErr
   605 00000430 FF4DBC                      dec DWord i
   606 00000433 FF4DBC                      dec DWord i         ; i=i
   607                                  
   608                                  NextSierrai:
   609 00000436 41                          inc ecx             ; i+1
   610 00000437 3B4DFC                      cmp ecx,picWd
   611 0000043A 0F8E54FFFFFF                jle Near Sierrai
   612                                  
   613 00000440 59                          pop ecx
   614 00000441 41                          inc ecx             ; j+1
   615 00000442 3B4DF8                      cmp ecx,picHt
   616 00000445 0F8E40FFFFFF                jle Near Sierraj
   617 0000044B C3                      RET
   618                                  
   619                                  ;=====================================================
   620                                  Jarvis:
   621                                  %define zMul    [ebp-72]    
   622                                  %define cul     [ebp-76]
   623                                  %define zErr    [ebp-80]
   624                                  %define Temp    [ebp-84]
   625                                  
   626 0000044C E86A030000                  Call FillIntensityArray
   627                                  
   628 00000451 D9E8                        fld1
   629 00000453 DB45E4                      fild DWord DithDIV  ; Jarvis,1
   630 00000456 DEF9                        fdivp st1           ; st1/sto = 1/Jarvis
   631 00000458 D95DB8                      fstp DWord zMul
   632                                  
   633 0000045B B901000000                  mov ecx,1           ; Need to start at 1
   634                                  Jarvisj:
   635 00000460 894DC0                      mov j,ecx
   636 00000463 51                          push ecx
   637 00000464 B901000000                  mov ecx,1
   638                                  
   639                                  Jarvisi:
   640 00000469 894DBC                      mov i,ecx
   641                                  
   642 0000046C E8B5030000                  Call Fillpic2memGetzErr
   643                                  
   644                                      ; Spread error j+2
   645 00000471 FF45C0                      inc DWord j
   646 00000474 FF45C0                      inc DWord j         ; j=j+2 ===
   647                                      
   648 00000477 FF4DBC                      dec DWord i
   649 0000047A FF4DBC                      dec DWord i         ; i=i-2
   650 0000047D B801000000                  mov eax,1
   651 00000482 E8BA000000                  Call Diffuse        ; IArr(i-2,j+2)=IArr(i-2,j+1)+1*zErr
   652 00000487 FF45BC                      inc DWord i         ; i=i-1
   653 0000048A B803000000                  mov eax,3
   654 0000048F E8AD000000                  Call Diffuse        ; IArr(i-1,j+2)=IArr(i-1,j+1)+3*zErr
   655 00000494 FF45BC                      inc DWord i         ; i=i
   656 00000497 B805000000                  mov eax,5
   657 0000049C E8A0000000                  Call Diffuse        ; IArr(i,j+2)=IArr(i,j+1)+5*zErr
   658 000004A1 FF45BC                      inc DWord i         ; i=i+1
   659 000004A4 B803000000                  mov eax,3
   660 000004A9 E893000000                  Call Diffuse        ; IArr(i+1,j+2)=IArr(i+1,j+1)+3*zErr
   661 000004AE FF45BC                      inc DWord i         ; i=i+2
   662 000004B1 B801000000                  mov eax,1
   663 000004B6 E886000000                  Call Diffuse        ; IArr(i+2,j+2)=IArr(i+2,j+1)+2*zErr
   664 000004BB FF4DBC                      dec DWord i
   665 000004BE FF4DBC                      dec DWord i         ; i=i
   666                                  
   667                                      ; Spread error j+1
   668 000004C1 FF4DC0                      dec DWord j         ; j=j+1
   669 000004C4 FF4DBC                      dec DWord i
   670 000004C7 FF4DBC                      dec DWord i         ; i=i-2
   671 000004CA B803000000                  mov eax,3
   672 000004CF E86D000000                  Call Diffuse        ; IArr(i-2,j+1)=IArr(i-2,j+1)+3*zErr
   673 000004D4 FF45BC                      inc DWord i         ; i=i-1
   674 000004D7 B805000000                  mov eax,5
   675 000004DC E860000000                  Call Diffuse        ; IArr(i-1,j+1)=IArr(i-1,j+1)+5*zErr
   676 000004E1 FF45BC                      inc DWord i         ; i=i
   677 000004E4 B807000000                  mov eax,7
   678 000004E9 E853000000                  Call Diffuse        ; IArr(i,j+1)=IArr(i,j+1)+7*zErr
   679 000004EE FF45BC                      inc DWord i         ; i=i+1
   680 000004F1 B805000000                  mov eax,5
   681 000004F6 E846000000                  Call Diffuse        ; IArr(i+1,j+1)=IArr(i+1,j+1)+5*zErr
   682 000004FB FF45BC                      inc DWord i         ; i=i+2
   683 000004FE B803000000                  mov eax,3
   684 00000503 E839000000                  Call Diffuse        ; IArr(i+2,j+1)=IArr(i+2,j+1)+2*zErr
   685 00000508 FF4DBC                      dec DWord i         ; i=i+1
   686                                  
   687                                      ; Spread error j
   688 0000050B FF4DC0                      dec DWord j         ; j=j
   689 0000050E B807000000                  mov eax,7
   690 00000513 E829000000                  Call Diffuse        ; IArr(i+1,j)=IArr(i+1,j)+8*zErr
   691 00000518 FF45BC                      inc DWord i         ; i=i+2
   692 0000051B B805000000                  mov eax,5
   693 00000520 E81C000000                  Call Diffuse        ; IArr(i+2,j)=IArr(i+2,j)+4*zErr
   694 00000525 FF4DBC                      dec DWord i
   695 00000528 FF4DBC                      dec DWord i         ; i=i
   696                                  
   697                                  NextJarvisi:
   698 0000052B 41                          inc ecx             ; i+1
   699 0000052C 3B4DFC                      cmp ecx,picWd
   700 0000052F 0F8E34FFFFFF                jle Near Jarvisi
   701                                  
   702 00000535 59                          pop ecx
   703 00000536 41                          inc ecx             ; j+1
   704 00000537 3B4DF8                      cmp ecx,picHt
   705 0000053A 0F8E20FFFFFF                jle Near Jarvisj
   706 00000540 C3                      RET
   707                                  
   708                                  ;=====================================================
   709                                  %define zMul    [ebp-72]    
   710                                  %define cul     [ebp-76]
   711                                  %define zErr    [ebp-80]
   712                                  %define Temp    [ebp-84]
   713                                  
   714                                  Diffuse:
   715                                  
   716 00000541 8945AC                      mov Temp,eax
   717 00000544 D945B0                      fld DWord zErr
   718 00000547 DB45AC                      fild DWord Temp
   719 0000054A DEC9                        fmulp st1           ; #*zErr
   720 0000054C 8B7DEC                      mov edi,PtrIArr
   721 0000054F E810030000                  Call GetAddrIArrji  ; edi-> IArr(i*,j*)
   722 00000554 DB07                        fild DWord [edi]
   723 00000556 DEC1                        faddp st1
   724 00000558 DB1F                        fistp DWord [edi]   ; IArr(i*,j*)=IArr(i*,j*)+#*zErr
   725                                  
   726 0000055A C3                      RET
   727                                  
   728                                  ;=====================================================
   729                                  
   730                                  %define j       [ebp-64]
   731                                  %define i       [ebp-68]
   732                                  %define jup     [ebp-72]    
   733                                  %define iup     [ebp-76]
   734                                  %define AvCount [ebp-80]
   735                                  %define AvGrey  [ebp-84]
   736                                  %define N       [ebp-88]
   737                                  %define jj      [ebp-92]
   738                                  %define ii      [ebp-96]
   739                                  
   740                                  DOPATTERN:
   741                                  ;   NX,NY,NT,PtrLimits
   742                                  
   743 0000055B E85B020000                  Call FillIntensityArray
   744 00000560 B801000000                  mov eax,1
   745                                  ForJJ:
   746 00000565 8945A4                      mov jj,eax
   747 00000568 0345D8                      add eax,NY
   748 0000056B 48                          dec eax
   749 0000056C 8945B8                      mov jup,eax
   750                                  
   751 0000056F B801000000                  mov eax,1
   752                                  ForII:
   753 00000574 8945A0                      mov ii,eax
   754 00000577 0345DC                      add eax,NX
   755 0000057A 48                          dec eax
   756 0000057B 8945B4                      mov iup,eax
   757                                  
   758 0000057E E891000000                  Call GetAvGrey
   759 00000583 8B45B0                      mov eax,AvCount
   760 00000586 0F8478000000                je Near NexJJ
   761                                  
   762 0000058C B801000000                  mov eax,1
   763                                  ForN:
   764 00000591 8945A8                      mov N,eax
   765                                  
   766 00000594 8B7DD0                      mov edi,PtrLimits
   767 00000597 48                          dec eax
   768 00000598 C1E002                      shl eax,2
   769 0000059B 01C7                        add edi,eax
   770 0000059D 8B07                        mov eax,[edi]
   771 0000059F 3B45AC                      cmp eax,AvGrey
   772 000005A2 7D44                        jge NexN
   773                                  
   774 000005A4 8B4DA4                      mov ecx,jj
   775                                  Forj2:
   776 000005A7 3B4DF8                      cmp ecx,picHt
   777 000005AA 7F3C                        jg NexN
   778 000005AC 894DC0                      mov j,ecx
   779 000005AF 51                          push ecx
   780 000005B0 8B4DA0                      mov ecx,ii
   781                                  Fori2:
   782 000005B3 3B4DFC                      cmp ecx,picWd
   783 000005B6 7F29                        jg Nexj2
   784 000005B8 894DBC                      mov i,ecx
   785 000005BB 51                          push ecx        ; ecx wanted for GetAddrTM
   786                                          ;----------
   787 000005BC 8B7DCC                          mov edi,PtrTM   
   788 000005BF E8D3020000                      Call GetAddrTM
   789 000005C4 59                              pop ecx
   790 000005C5 31C0                            xor eax,eax
   791 000005C7 8A07                            mov AL,Byte[edi]
   792 000005C9 3C31                            cmp AL,49
   793 000005CB 750E                            jne Nexi2
   794 000005CD 8B7DF0                          mov edi,Ptrpic2mem
   795 000005D0 E8A4020000                      Call GetAddrpicji
   796 000005D5 C707FFFFFF00                    mov [edi],DWord 0FFFFFFh    ; White
   797                                          ;----------
   798                                  Nexi2:
   799 000005DB 41                          inc ecx
   800 000005DC 3B4DB4                      cmp ecx,iup
   801 000005DF 7ED2                        jle Fori2
   802                                  Nexj2:
   803 000005E1 59                          pop ecx
   804 000005E2 41                          inc ecx
   805 000005E3 3B4DB8                      cmp ecx,jup
   806 000005E6 7EBF                        jle Forj2
   807                                  
   808                                  NexN:
   809 000005E8 8B45A8                      mov eax,N
   810 000005EB 40                          inc eax
   811 000005EC 3B45D4                      cmp eax,NT
   812 000005EF 0F8E9CFFFFFF                jle Near ForN
   813                                  
   814                                  NexII:
   815 000005F5 8B45A0                      mov eax,ii
   816 000005F8 0345DC                      add eax,NX
   817 000005FB 3B45FC                      cmp eax,picWd
   818 000005FE 0F8E70FFFFFF                jle Near ForII
   819                                  NexJJ:
   820 00000604 8B45A4                      mov eax,jj
   821 00000607 0345D8                      add eax,NY
   822 0000060A 3B45F8                      cmp eax,picHt
   823 0000060D 0F8E52FFFFFF                jle Near ForJJ
   824 00000613 C3                      RET
   825                                  
   826                                  ;=====================================================
   827                                  GetAvGrey:
   828                                  
   829 00000614 31C0                        xor eax,eax
   830 00000616 8945B0                      mov AvCount,eax
   831 00000619 8945AC                      mov AvGrey,eax
   832                                  
   833 0000061C 8B4DA4                      mov ecx,jj
   834                                  Forj1:
   835 0000061F 894DC0                      mov j,ecx
   836 00000622 51                          push ecx
   837 00000623 8B4DA0                      mov ecx,ii
   838                                  Fori1:
   839 00000626 894DBC                      mov i,ecx
   840                                  
   841 00000629 8B7DEC                      mov edi,PtrIArr
   842 0000062C E833020000                  Call GetAddrIArrji      ; edi->IArr(i,j)
   843 00000631 8B45AC                      mov eax,AvGrey
   844 00000634 0307                        add eax,DWord[edi]
   845 00000636 8945AC                      mov AvGrey,eax
   846 00000639 FF45B0                      inc DWord AvCount
   847                                  Nexi1:
   848 0000063C 41                          inc ecx
   849 0000063D 3B4DB4                      cmp ecx,iup
   850 00000640 7EE4                        jle Fori1
   851                                  Nexj1:
   852 00000642 59                          pop ecx
   853 00000643 41                          inc ecx
   854 00000644 3B4DB8                      cmp ecx,jup
   855 00000647 7ED6                        jle Forj1
   856                                  ;------------
   857 00000649 8B45B0                      mov eax,AvCount
   858 0000064C 89C3                        mov ebx,eax
   859 0000064E 3D00000000                  cmp eax,0
   860 00000653 7408                        je garet
   861 00000655 8B45AC                      mov eax,AvGrey
   862 00000658 F7F3                        div ebx
   863 0000065A 8945AC                      mov AvGrey,eax
   864                                  garet:
   865 0000065D C3                      RET
   866                                  
   867                                  ;=====================================================
   868                                  RANDOM:
   869                                  %define j       [ebp-64]
   870                                  %define i       [ebp-68]
   871                                  %define jup     [ebp-72]    
   872                                  %define iup     [ebp-76]
   873                                  %define AvCount [ebp-80]
   874                                  %define AvGrey  [ebp-84]
   875                                  %define N       [ebp-88]
   876                                  %define jj      [ebp-92]
   877                                  %define ii      [ebp-96]
   878                                  
   879                                  %define jjup    [ebp-100]
   880                                  %define iiup    [ebp-104]
   881                                  %define cul0    [ebp-108]
   882                                  %define culr    [ebp-112]
   883                                  %define Seed    [ebp-116] ; from RandSeed
   884                                  %define Rand    [ebp-120]
   885                                  %define T255    [ebp-124]
   886                                  
   887                                  
   888                                  
   889                                  
   890 0000065E E858010000                  Call FillIntensityArray
   891                                      
   892 00000663 B8FF000000                  mov eax,255
   893 00000668 894584                      mov T255,eax    ; 255 for Random no.
   894                                      
   895 0000066B B801000000                  mov eax,1
   896                                  ForJJR:
   897 00000670 8945A4                      mov jj,eax
   898 00000673 0345D8                      add eax,NY
   899 00000676 48                          dec eax
   900 00000677 8945B8                      mov jup,eax
   901                                  
   902 0000067A B801000000                  mov eax,1
   903                                  ForIIR:
   904 0000067F 8945A0                      mov ii,eax
   905 00000682 0345DC                      add eax,NX
   906 00000685 48                          dec eax
   907 00000686 8945B4                      mov iup,eax
   908                                  
   909 00000689 E886FFFFFF                  Call GetAvGrey
   910 0000068E 8B45B0                      mov eax,AvCount
   911 00000691 3D00000000                  cmp eax,0
   912 00000696 0F844D000000                je Near NexJJR
   913                                  
   914                                  
   915 0000069C B801000000                  mov eax,1
   916                                  ForNR:
   917 000006A1 8945A8                      mov N,eax
   918                                  
   919 000006A4 8B7DD0                      mov edi,PtrLimits
   920 000006A7 48                          dec eax
   921 000006A8 C1E002                      shl eax,2
   922 000006AB 01C7                        add edi,eax
   923 000006AD 8B07                        mov eax,[edi]
   924 000006AF 3B45AC                      cmp eax,AvGrey
   925 000006B2 7C0A                        jl NexNR
   926                                  
   927 000006B4 E840000000                  Call RandEval
   928                                  
   929 000006B9 E90D000000                  jmp TestN10
   930                                  
   931                                  NexNR:
   932 000006BE 8B45A8                      mov eax,N
   933 000006C1 40                          inc eax
   934 000006C2 3B45D4                      cmp eax,NT
   935 000006C5 0F8ED6FFFFFF                jle Near ForNR
   936                                  
   937                                  TestN10:
   938 000006CB 8B45A8                      mov eax,N
   939 000006CE 3D0A000000                  cmp eax,10
   940 000006D3 7505                        jne NexIIR
   941                                      
   942 000006D5 E81F000000                  Call RandEval
   943                                  
   944                                  NexIIR:
   945 000006DA 8B45A0                      mov eax,ii
   946 000006DD 0345DC                      add eax,NX
   947 000006E0 3B45FC                      cmp eax,picWd
   948 000006E3 0F8E96FFFFFF                jle Near ForIIR
   949                                  NexJJR:
   950 000006E9 8B45A4                      mov eax,jj
   951 000006EC 0345D8                      add eax,NY
   952 000006EF 3B45F8                      cmp eax,picHt
   953 000006F2 0F8E78FFFFFF                jle Near ForJJR
   954                                  
   955 000006F8 C3                      RET
   956                                  
   957                                  ;=====================================================
   958                                  RandEval:       ; k=N, ii,jj
   959                                  
   960 000006F9 31C0                        xor eax,eax
   961 000006FB 894590                      mov culr,eax
   962 000006FE B8FF000000                  mov eax,255
   963 00000703 894594                      mov cul0,eax
   964                                  
   965 00000706 8B7DD0                      mov edi,PtrLimits
   966 00000709 8B45A8                      mov eax,N
   967 0000070C 48                          dec eax
   968 0000070D C1E002                      shl eax,2       ;(N-1)*4
   969 00000710 01C7                        add edi,eax
   970 00000712 8B07                        mov eax,[edi]
   971 00000714 3D80000000                  cmp eax,128
   972 00000719 7D0D                        jge culset  ; RandomLimits(N)>=128
   973                                      ; Swap cul0,culr 
   974 0000071B 31C0                        xor eax,eax
   975 0000071D 894594                      mov cul0,eax
   976 00000720 B8FF000000                  mov eax,255
   977 00000725 894590                      mov culr,eax
   978                                  
   979                                  culset:
   980 00000728 8B45A4                      mov eax,jj
   981 0000072B 0502000000                  add eax,2
   982 00000730 89459C                      mov jjup,eax
   983                                  
   984 00000733 8B45A0                      mov eax,ii
   985 00000736 0502000000                  add eax,2
   986 0000073B 894598                      mov iiup,eax
   987                                      
   988                                  
   989 0000073E 8B4594                      mov eax,cul0
   990 00000741 3DFF000000                  cmp eax,255
   991 00000746 7533                        jne TCulr
   992                                      
   993 00000748 8B4DA4                      mov ecx,jj
   994                                  ForRjj:
   995 0000074B 894DC0                      mov j,ecx
   996                                  
   997 0000074E 3B4DF8                      cmp ecx,picHt
   998 00000751 7F67                        jg Ranret
   999                                  
  1000 00000753 51                          push ecx
  1001                                  
  1002 00000754 8B4DA0                      mov ecx,ii
  1003                                  ForRii:
  1004 00000757 894DBC                      mov i,ecx
  1005                                  
  1006 0000075A 3B4DFC                      cmp ecx,picWd
  1007 0000075D 7F14                        jg NexRjj
  1008                                  
  1009 0000075F 8B7DF0                          mov edi,Ptrpic2mem
  1010 00000762 E812010000                      Call GetAddrpicji
  1011 00000767 C707FFFFFF00                    mov [edi],DWord 0FFFFFFh    ; White
  1012                                  NexRii:
  1013 0000076D 41                          inc ecx
  1014 0000076E 3B4D98                      cmp ecx,iiup
  1015 00000771 7EE4                        jle ForRii
  1016                                  
  1017                                  NexRjj:
  1018 00000773 59                          pop ecx
  1019 00000774 41                          inc ecx
  1020 00000775 3B4D9C                      cmp ecx,jjup
  1021 00000778 7ED1                        jle ForRjj  
  1022 0000077A C3                      RET
  1023                                  
  1024                                  TCulr:
  1025                                  
  1026 0000077B 8B45A8                      mov eax,N
  1027 0000077E 3D00000000                  cmp eax,0
  1028 00000783 7E35                        jle Ranret
  1029 00000785 3D09000000                  cmp eax,9
  1030 0000078A 7D2E                        jge Ranret
  1031                                  
  1032 0000078C B901000000                  mov ecx,1
  1033                                  Fornn:
  1034                                  
  1035                                      
  1036                                      ;j=int((jjup-jj)*rnd+jj)
  1037                                      ;i=int((iiup-ii)*rnd+ii)
  1038                                  
  1039 00000791 E829010000                  Call RANDNOISE
  1040                                  
  1041 00000796 8B45C0                      mov eax,j
  1042 00000799 3B45F8                      cmp eax,picHt
  1043 0000079C 7F16                        jg nexnn
  1044                                  
  1045 0000079E 8B45BC                      mov eax,i
  1046 000007A1 3B45FC                      cmp eax,picWd
  1047 000007A4 7F0E                        jg nexnn
  1048                                  
  1049 000007A6 8B7DF0                          mov edi,Ptrpic2mem
  1050 000007A9 E8CB000000                      Call GetAddrpicji
  1051 000007AE C707FFFFFF00                    mov [edi],DWord 0FFFFFFh    ; White
  1052                                  nexnn:
  1053 000007B4 41                          inc ecx
  1054 000007B5 3B4DA8                      cmp ecx,N
  1055 000007B8 7CD7                        jl Fornn
  1056                                      
  1057                                  Ranret:
  1058 000007BA C3                      RET
  1059                                  
  1060                                  ;=====================================================
  1061                                  FillIntensityArray:
  1062 000007BB 31C0                        xor eax,eax
  1063 000007BD 8945E0                      mov greysum,eax     ; greysum=0
  1064                                  
  1065 000007C0 8B4DF8                      mov ecx,picHt
  1066                                  FIAj:
  1067 000007C3 894DC0                      mov j,ecx
  1068 000007C6 51                          push ecx
  1069 000007C7 8B4DFC                      mov ecx,picWd
  1070                                  FIAi:
  1071 000007CA 894DBC                      mov i,ecx
  1072 000007CD 8B7DF4                      mov edi,Ptrpic1mem
  1073 000007D0 E8A4000000                  Call GetAddrpicji       ; edi-> pic1mem(1,i,j)
  1074 000007D5 31C0                        xor eax,eax
  1075 000007D7 31DB                        xor ebx,ebx
  1076 000007D9 8A07                        mov AL,Byte[edi]        ; B
  1077 000007DB 8A5F01                      mov BL,Byte[edi+1]  ; G
  1078 000007DE 01D8                        add eax,ebx
  1079 000007E0 8A5F02                      mov BL,Byte[edi+2]  ; R
  1080 000007E3 01D8                        add eax,ebx
  1081 000007E5 BB03000000                  mov ebx,3
  1082 000007EA F7F3                        div ebx             ; eax = (B+G+R)\3
  1083 000007EC 50                          push eax                ; grey byte
  1084 000007ED 8B7DEC                      mov edi,PtrIArr     ; edi-> IArr(1,1)
  1085 000007F0 E86F000000                  Call GetAddrIArrji      ; edi-> IArr(i,j)
  1086 000007F5 58                          pop eax             ; grey byte
  1087 000007F6 8907                        mov [edi],eax
  1088 000007F8 0145E0                      add greysum,eax     ; greysum + grey byte
  1089                                   
  1090 000007FB 49                          dec ecx
  1091 000007FC 75CC                        jnz FIAi
  1092                                  
  1093 000007FE 59                          pop ecx
  1094 000007FF 49                          dec ecx
  1095 00000800 75C1                        jnz FIAj
  1096                                  
  1097 00000802 8B45F8                      mov eax,picHt
  1098 00000805 8B5DFC                      mov ebx,picWd
  1099 00000808 F7E3                        mul ebx             ; eax=greycount
  1100 0000080A 89C3                        mov ebx,eax         ; ebx=greycount
  1101 0000080C 8B45E0                      mov eax,greysum
  1102 0000080F F7F3                        div ebx             ; average greysum
  1103 00000811 8945E0                      mov greysum,eax
  1104                                  
  1105                                      ; Zero pic2mem
  1106 00000814 8B45F8                      mov eax,picHt
  1107 00000817 8B5DFC                      mov ebx,picWd
  1108 0000081A F7E3                        mul ebx
  1109 0000081C 89C1                        mov ecx,eax         ; picHt*picWd no. of 4-bytes chunks in pic2mem
  1110 0000081E 31C0                        xor eax,eax         ; eax=0
  1111 00000820 8B7DF0                      mov edi,Ptrpic2mem
  1112 00000823 F3AB                        rep stosd
  1113                                  
  1114 00000825 C3                      RET
  1115                                  
  1116                                  ;=====================================================
  1117                                  Fillpic2memGetzErr:
  1118 00000826 31C0                        xor eax,eax
  1119 00000828 8945B4                      mov cul,eax         ; cul=0
  1120 0000082B 8B7DEC                      mov edi,PtrIArr
  1121 0000082E E831000000                  Call GetAddrIArrji      ; edi-> IArr(i,j)
  1122 00000833 8B07                        mov eax,[edi]
  1123 00000835 8945AC                      mov Temp,eax        ; IArr(i,j)
  1124 00000838 3B45E0                      cmp eax,greysum
  1125 0000083B 7E16                        jle CalcZerr
  1126                                      
  1127 0000083D B8FF000000                  mov eax,255
  1128 00000842 8945B4                      mov cul,eax         ; cul=255
  1129 00000845 8B7DF0                      mov edi,Ptrpic2mem
  1130 00000848 E82C000000                  Call GetAddrpicji       ; edi-> pic2mem(1,i,j)
  1131 0000084D C707FFFFFF00                mov [edi],DWord 0FFFFFFh    ; White
  1132                                  
  1133                                  CalcZerr:
  1134 00000853 DB45AC                      fild DWord Temp     ; IArr(i,j)
  1135 00000856 DB45B4                      fild DWord cul
  1136 00000859 DEE9                        fsubp st1           ; IArr(i,j)-cul
  1137 0000085B D945B8                      fld DWord zMul      ; zMul,IArr(i,j)-cul
  1138 0000085E DEC9                        fmulp st1           ; zErr
  1139 00000860 D95DB0                      fstp DWord zErr     ; = (IArr(i,j)-cul) * zMul
  1140 00000863 C3                      RET
  1141                                  
  1142                                  ;=====================================================
  1143                                  GetAddrIArrji:
  1144                                  ; Zero Intensity Array
  1145                                  ; VB ReDim IArr(-1 To picWd + 2, -1 To picHt + 2)
  1146                                  
  1147                                  ;   edi-> IArr(-1,-1)  
  1148                                  ;   addr=edi + 4*[(j+1)*picWd + (i+1)]
  1149 00000864 8B45C0                      mov eax,j
  1150 00000867 40                          inc eax
  1151                                  
  1152 00000868 8B5DFC                      mov ebx,picWd
  1153 0000086B F7E3                        mul ebx
  1154 0000086D 8B5DBC                      mov ebx,i
  1155 00000870 43                          inc ebx
  1156                                  
  1157 00000871 01D8                        add eax,ebx
  1158 00000873 C1E002                      shl eax,2       ; x4
  1159 00000876 01C7                        add edi,eax
  1160 00000878 C3                      RET 
  1161                                  
  1162                                  ;=====================================================
  1163                                  GetAddrpicji:
  1164                                  ;   edi->pic1mem(1,1,1) or pic2mem(1,1,1) 
  1165                                  ;   addr=edi + 4*[(j-1)*picWd + (i-1)]
  1166 00000879 8B45C0                      mov eax,j
  1167 0000087C 48                          dec eax
  1168                                  
  1169 0000087D 8B5DFC                      mov ebx,picWd
  1170 00000880 F7E3                        mul ebx
  1171 00000882 8B5DBC                      mov ebx,i
  1172 00000885 4B                          dec ebx
  1173                                  
  1174 00000886 01D8                        add eax,ebx
  1175 00000888 C1E002                      shl eax,2       ; x4
  1176 0000088B 01C7                        add edi,eax
  1177 0000088D C3                      RET 
  1178                                  
  1179                                  GetAddrLimits:
  1180                                  ; edi-> Limits(1) ,N
  1181 0000088E 8B45A8                      mov eax,N
  1182 00000891 48                          dec eax
  1183 00000892 C1E002                      shl eax,2
  1184 00000895 01C7                        add edi,eax
  1185                                  
  1186                                  ;=====================================================
  1187                                  GetAddrTM:  ;In. edi->TM(1,1)   TM(NX,NY,N) Bytes 
  1188                                              ;Out. edi->TM(i-ii+1,j-jj+1,N) byte array
  1189                                              ;  NX-1  + (NY-1)*NX + (N-1)*NX*NY
  1190                                              ; (i-ii) + (j-jj)*NX + (N-1)*NX*NY
  1191 00000897 8B45A8                      mov eax,N
  1192 0000089A 48                          dec eax
  1193 0000089B 8B5DDC                      mov ebx,NX
  1194 0000089E F7E3                        mul ebx
  1195 000008A0 8B5DD8                      mov ebx,NY
  1196 000008A3 F7E3                        mul ebx         ;(N-1)*NX*NY
  1197                                  
  1198 000008A5 89C1                        mov ecx,eax     ;ecx=(N-1)*NX*NY
  1199 000008A7 8B45C0                      mov eax,j
  1200 000008AA 2B45A4                      sub eax,jj
  1201 000008AD 8B5DDC                      mov ebx,NX
  1202 000008B0 F7E3                        mul ebx
  1203 000008B2 01C1                        add ecx,eax     ;ecx=(j-jj)*NX + (N-1)*NX*NY
  1204                                  
  1205 000008B4 8B45BC                      mov eax,i
  1206 000008B7 2B45A0                      sub eax,ii
  1207 000008BA 01C8                        add eax,ecx     ;eax=(i-ii) + (j-jj)*NX + (N-1)*NX*NY
  1208 000008BC 01C7                        add edi,eax
  1209 000008BE C3                      RET
  1210                                  
  1211                                  ;============================================================
  1212                                  RANDNOISE:  ;In: RandSeed,jjup,jj iiup,ii Out: j & i random postions
  1213 000008BF B813180100                  mov eax,011813h     ; 71699 prime 
  1214 000008C4 F76D8C                      imul DWORD Seed
  1215 000008C7 0509B20A00                  add eax, 0AB209h    ; 700937 prime
  1216 000008CC D1D8                        rcr eax,1           ; leaving out gives vertical lines plus
  1217                                                          ; faint horizontal ones, tartan
  1218                                  
  1219                                      ;----------------------------------------
  1220                                      ;jc ok              ; these 2 have little effect
  1221                                      ;rol eax,1          ;
  1222                                  ok:                     ;
  1223                                      ;----------------------------------------
  1224                                      
  1225                                      ;----------------------------------------
  1226                                      ;dec eax            ; these produce vert lines
  1227                                      ;inc eax            ; & with fsin marble arches
  1228                                      ;----------------------------------------
  1229                                  
  1230 000008CE 89458C                      mov Seed,eax    ; save seed
  1231 000008D1 25FF000000                  and eax,255     ; 0-255
  1232 000008D6 894588                      mov Rand,eax
  1233                                      
  1234 000008D9 DB4588                      fild DWord Rand    ; ran (0-255)
  1235 000008DC DB4584                      fild Dword T255    ; 255
  1236 000008DF DEF9                        fdivp st1           ; st1/st0  R=ran/255  (0-1)
  1237                                      
  1238 000008E1 DB459C                      fild DWord jjup
  1239 000008E4 DB45A4                      fild Dword jj
  1240 000008E7 DEE9                        fsubp st1           ; st1-st0   (jjup-jj)
  1241                                      
  1242 000008E9 DEC9                        fmulp st1           ; (jjup-jj)*R
  1243 000008EB DB45A4                      fild Dword jj
  1244 000008EE DEC1                        faddp st1           ; (jjup-jj)*R + jj
  1245 000008F0 DB5DC0                      fistp Dword j       ; j=Int((jjup-jj)*R + jj)
  1246                                  
  1247                                  ;=============================================================
  1248                                  
  1249 000008F3 B813180100                  mov eax,011813h     ; 71699 prime 
  1250 000008F8 F76D8C                      imul DWORD Seed
  1251 000008FB 0509B20A00                  add eax, 0AB209h    ; 700937 prime
  1252 00000900 D1D8                        rcr eax,1           ; leaving out gives vertical lines plus
  1253                                                          ; faint horizontal ones, tartan
  1254                                  
  1255                                      ;----------------------------------------
  1256                                      ;jc ok2             ; these 2 have little effect
  1257                                      ;rol eax,1          ;
  1258                                  ok2:                        ;
  1259                                      ;----------------------------------------
  1260                                      
  1261                                      ;----------------------------------------
  1262                                      ;dec eax            ; these produce vert lines
  1263                                      ;inc eax            ; & with fsin marble arches
  1264                                      ;----------------------------------------
  1265                                  
  1266 00000902 89458C                      mov Seed,eax    ; save seed
  1267 00000905 25FF000000                  and eax,255
  1268 0000090A 894588                      mov Rand,eax
  1269                                      
  1270 0000090D DB4588                      fild DWord Rand    ; ran (0-255)
  1271 00000910 DB4584                      fild Dword T255    ; 255
  1272 00000913 DEF9                        fdivp st1           ; st1/st0   R=ran/255  (0-1)
  1273                                  
  1274 00000915 DB4598                      fild DWord iiup
  1275 00000918 DB45A0                      fild Dword ii
  1276 0000091B DEE9                        fsubp st1           ; st1-st0   (iiup-ii)
  1277                                      
  1278 0000091D DEC9                        fmulp st1           ; (iiup-ii)*R
  1279 0000091F DB45A0                      fild Dword ii
  1280 00000922 DEC1                        faddp st1           ; (iiup-ii)*R + ii
  1281 00000924 DB5DBC                      fistp Dword i       ; i=Int((iiup-ii)*R + ii)
  1282 00000927 C3                      RET
  1283                                  
  1284                                  ;=============================================================
  1285                                  ; Jump table
  1286                                  [SECTION .data]
  1287 00000000 [9F000000]              Sub0 dd BLACKWHITE
  1288 00000004 [F7000000]              Sub1 dd FloydSteinbergA
  1289 00000008 [62010000]              Sub2 dd FloydSteinbergB
  1290 0000000C [DD010000]              Sub3 dd Stucki
  1291 00000010 [D2020000]              Sub4 dd Burkes
  1292 00000014 [77030000]              Sub5 dd Sierra
  1293 00000018 [4C040000]              Sub6 dd Jarvis
  1294 0000001C [5B050000]              Sub7 dd DOPATTERN
  1295 00000020 [5E060000]              Sub8 dd RANDOM
  1296 00000024 [93000000]              Sub9 dd GETOUT
  1297                                  
  1298                                  
  1299                                  
  1300                                  
  1301                                  
